# 標準偏差を使った方法（平均値から標準偏差のn倍離れているものを除外）

def outlier_std(df, thresh=3, columns=None):
    if columns == None:
        columns = df.columns

    for col in columns:
        mean = df[col].mean()
        std = df[col].std()
        
        # 平均値から標準偏差の何倍離れているかを計算
        border = (np.abs(df[col] - mean)) / std
        
        # 標準偏差の3倍以上離れているデータを除外
        df = df[(border < thresh)]
        
    return df

# 提供された outlier_std 関数は、標準偏差を用いて外れ値（異常値）を検出し、DataFrameからそれらの外れ値を除外するための関数です。この関数は次のように動作します：
# 引数として df（DataFrame）、thresh（閾値）、および columns（外れ値検出を行う列のリスト）を受け取ります。thresh はデフォルトで3に設定されており、外れ値としての閾値を制御します。columns は外れ値検出を行う対象の列を指定するオプションの引数です。指定しない場合、DataFrame内のすべての列が対象となります。
# 指定された各列に対して、平均値（mean）と標準偏差（std）を計算します。これらの統計量は、外れ値の基準となります。
# 各データポイントが、その列の平均値から何倍の標準偏差離れているかを計算し、絶対値を取ります。これにより、データポイントが平均値からどれだけ離れているかを正確に計算できます。
# 標準偏差の thresh 倍以上離れているデータポイントを除外します。つまり、平均値から thresh 倍以上の標準偏差離れているデータポイントは、外れ値と見なされ、DataFrameから削除されます。
# 最終的に、外れ値が除外された新しいDataFrameが作成され、それが関数の戻り値として返されます。
# この関数を使用することで、DataFrame内の異常なデータポイントを検出し、必要に応じて取り除くことができます。外れ値の定義や閾値を調整することで、外れ値検出の精度を調整できます。



# 提供された outlier_std 関数は、標準偏差を使用して外れ値を検出し、指定されたDataFrameから外れ値を削除するものです。以下に具体例を示します：
# まず、必要なライブラリをインポートします。

import pandas as pd
import numpy as np

# サンプルのDataFrameを作成
data = {'A': [1, 2, 3, 4, 100],
        'B': [5, 6, 7, 8, 200],
        'C': [9, 10, 11, 12, 300]}

df = pd.DataFrame(data)

# このDataFrameには、外れ値として100、200、300という大きな値が含まれています。
# そして、outlier_std 関数を使用して外れ値を削除します。

# 外れ値を削除
filtered_df = outlier_std(df)

# 結果を表示
print(filtered_df)

# このコードを実行すると、outlier_std 関数が呼び出され、外れ値が含まれている列（A、B、C列）から外れ値が削除された新しいDataFrame filtered_df が作成されます。
# 結果は次のようになります：

#    A  B   C
# 0  1  5   9
# 1  2  6  10
# 2  3  7  11
# 3  4  8  12

# この結果からわかるように、関数 outlier_std は外れ値を削除し、外れ値を含む行がDataFrameから取り除かれています。関数はデフォルトで標準偏差の3倍以上離れているデータを除外しますが、thresh パラメータを変更することで閾値を調整できます。
